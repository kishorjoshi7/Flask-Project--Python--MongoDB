# Common Errors and Resolutions in Flask-Tutorial

This file documents errors encountered during development, their causes, and how they were resolved. It also provides background knowledge to help you understand and fix similar issues in the future. If you are a beginner, read through these examples to learn how to debug and solve common problems in Flask, MongoDB, and Python microservices projects.

---

## 1. TypeError: Object of type ObjectId is not JSON serializable

**Error Message:**
```
TypeError: Object of type ObjectId is not JSON serializable
```
**Where it happened:**
- In the `/submit` route of the backend, when returning the result of a MongoDB insert operation as JSON.
**Why it happened:**
- PyMongo returns an `_id` of type `ObjectId`, which is not JSON serializable.
**How it was resolved:**
- Convert the `ObjectId` to a string before returning it in the JSON response:
  ```python
  return {'inserted_id': str(result.inserted_id)}
  ```
**Tip:** Always convert custom types (like ObjectId, datetime) to string before returning in JSON.

---

## 2. ImportError: cannot import name 'load_dotenv' from 'dotenv'

**Error Message:**
```
ImportError: cannot import name 'load_dotenv' from 'dotenv'
```
**Where it happened:**
- When trying to import `load_dotenv` in `backend/app.py`.
**Why it happened:**
- The wrong package (`dotenv`) was installed instead of `python-dotenv`.
- Sometimes, a file or folder named `dotenv.py` in your project can shadow the real package.
**How it was resolved:**
- Uninstall `dotenv`, install `python-dotenv`, and check for naming conflicts.
- Make sure your import is:
  ```python
  from dotenv import load_dotenv
  ```

---

## 3. ModuleNotFoundError: No module named 'flask'

**Error Message:**
```
ModuleNotFoundError: No module named 'flask'
```
**Where it happened:**
- When running either Flask app without activating the virtual environment.
**Why it happened:**
- Flask is installed in your virtual environment, not globally.
**How it was resolved:**
- Activate the virtual environment before running the app:
  ```bash
  source flaskenv/bin/activate
  ```
- If the environment doesn't exist, create it and install requirements.

---

## 4. CORS Error: Blocked by CORS policy

**Error Message:**
```
Access to fetch at 'http://localhost:5001/submit' from origin 'http://localhost:5000' has been blocked by CORS policy.
```
**Where it happened:**
- When the frontend tried to POST to the backend on a different port.
**Why it happened:**
- The backend did not allow cross-origin requests.
**How it was resolved:**
- Enabled CORS in the backend using Flask-CORS:
  ```python
  from flask_cors import CORS
  CORS(app)
  ```
**Tip:** In production, restrict allowed origins for security.

---

## 5. requests.exceptions.ConnectionError (Frontend)

**Error Message:**
```
requests.exceptions.ConnectionError: HTTPConnectionPool(host='localhost', port=5001): Max retries exceeded
```
**Where it happened:**
- When the frontend tried to contact the backend but the backend was not running or on the wrong port.
**Why it happened:**
- The backend service was not started, or the port was incorrect.
**How it was resolved:**
- Ensure the backend is running on port 5001 before starting the frontend.
- Double-check the BACKEND_URL in the frontend code.

---

## 6. ValueError: MongoDB URI not found in environment variables.

**Error Message:**
```
ValueError: MongoDB URI not found in environment variables.
```
**Where it happened:**
- When starting the backend without a valid `.env` file.
**Why it happened:**
- The `.env` file was missing or the variable name was incorrect.
**How it was resolved:**
- Create a `.env` file with the correct `mongo_uri` variable.
- Example:
  ```
  mongo_uri=mongodb+srv://<username>:<password>@<cluster-url>/<dbname>?retryWrites=true&w=majority
  ```

---

## 7. KeyError or AttributeError on Form Data

**Error Message:**
```
KeyError: 'fieldname' or AttributeError: 'NoneType' object has no attribute 'get'
```
**Where it happened:**
- When accessing form data in Flask routes.
**Why it happened:**
- The form field was missing or the request data was not sent as expected.
**How it was resolved:**
- Always check if the key exists before accessing it:
  ```python
  value = request.form.get('fieldname', default_value)
  ```

---

## 8. pymongo.errors.ServerSelectionTimeoutError

**Error Message:**
```
pymongo.errors.ServerSelectionTimeoutError: ...
```
**Where it happened:**
- When the backend could not connect to MongoDB Atlas.
**Why it happened:**
- Wrong URI, network issues, or IP not whitelisted in Atlas.
**How it was resolved:**
- Double-check your URI and credentials.
- Make sure your current IP is whitelisted in Atlas.

---

## 9. ImportError: No module named 'requests' or 'flask_cors'

**Error Message:**
```
ImportError: No module named 'requests'
```
**Where it happened:**
- When running the frontend or backend without installing all dependencies.
**How it was resolved:**
- Run `pip install -r requirements.txt` in your virtual environment.

---

## 10. General Debugging Tips for Beginners
- Always read the full error message; it usually tells you what went wrong and where.
- Google the error message if you don't understand it.
- Check that all services (frontend, backend, database) are running and on the correct ports.
- Use print statements or logging to debug your code.
- Keep your virtual environment activated while working on the project.
- Update this file with new errors and solutions as you learn.

---

Add more errors and solutions here as you encounter them!
